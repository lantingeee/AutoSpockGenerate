## Customize the name of the member and local field (if needed) used to store the instance of the source class.
#set($sourceClass.name = "${sourceClass.name}")
#set($sourceClass.packageName = "${sourceClass.packageName}")
#set($sourceClass.importContent = "${sourceClass.importContent}")
#set($sourceClass.type = "${sourceClass.type}")
#set($sourceClass.testClassMemberName = "${sourceClass.testClassMemberName}")
###set($sourceClass.testClassMemberName = "${sourceClass.testClassMemberName}")

##----------------------------------------------------------------------------------------------------------------------

## Initialize the data model. This sets global variables based on the architype of the source class and Quick Settings.
## See the comments above the macro or https://squaretest.com#template_api_initializeTemplateDataModel for details.

## Render the package declaration.
#if($StringUtils.isNotEmpty($sourceClass.packageName))
package $sourceClass.packageName;
#end

## Render the imports.
#foreach($importLine in $importLinesRequired)
    $importLine
#end
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import qunar.tc.qmq.base.BaseMessage;
import spock.lang.Subject;
import com.blogspot.toomuchcoding.spock.subjcollabs.Collaborator;
import spock.lang.Specification
import spock.lang.Unroll

## Render the test class.
class ${sourceClass.name}Test extends Specification {

## Declare member fields for the mocked dependencies.
#memberDecarations($mockMembers)

## Declare a member field for the instance of the source class.
@Subject
public ${sourceClass.type.canonicalText} ${sourceClass.testClassMemberName};

##    生成初始化代码
def setup() {
#set($_ = $CodeStyleUtils.beginMethodScope())
#if(!$mockMembers.empty)
    ${sourceClass.testClassMemberName} = new ${sourceClass.type.canonicalText}(
    #foreach($param in $mockMembers)
        $param.testClassMemberName: $param.testClassMemberName#if($foreach.hasNext),#end
    #end)
#end
#set($_ = $CodeStyleUtils.endMethodScope())
}

#generateAllTestCode($testInfos)
}

#macro(memberDecarations $params)
    #foreach($param in $params)
    @Collaborator
    private $param.type.canonicalText $param.testClassMemberName = Mock();
    #end
#end

#macro(mockMethod $tempMethod)
    ${tempMethod.mockedResponse.responseConditionsStr}

    #set($tempParam =
        "#if(!$tempMethod.params.empty)
            #foreach($tm in $tempMethod.params)
            _ as $tm.name#if($foreach.hasNext),#end
            #end
        #end")
    ${tempMethod.filed}.${tempMethod.methodCall}(${tempParam}) >>> [#foreach($statement in $tempMethod.mockedResponse.declareStatements)$statement,#end]
#end


#macro(generateTestMethod $testInfo)
    #set($_ = $CodeStyleUtils.beginMethodScope())
@Test
void test${StringUtils.capitalize(${testInfo.testMethod.methodCall})}() {
// Setup
given:
    ## Construct the source class if needed.
    #initParams(${testInfo.params})
    #mockMethodPart($testInfo.needMockTestMethods)

// Run the test
    #if($testInfo.needMockTestMethods) then: #else expect: #end
    #set($tempParam ="#if($testInfo.params) #combineParams($testInfo.params) #end")

def result = ${testInfo.testMethod.filed}.${testInfo.testMethod.methodCall}(${tempParam})

// Verify the results
    #if($testInfo.expectedValueNull)
    assertNull(result);
    #elseif($testInfo.expectedValueTrue)
    assertTrue(result);
    #end
    #set($_ = $CodeStyleUtils.endMethodScope())
}
#end

#macro(generateAllTestCode $testInfos)
    #foreach($testMethod in $testInfos)
        #generateTestMethod($testMethod)
    #end
#end



##TODO 1.将 会变化的 code 收集
#macro(initParams $params)
    #foreach($param in $params)
        ${param.name} ${param.testClassMemberName} = new ${param.name}();
        ## 内部属性初始化
        ##        #if(!$param.innerAttrClass.empty)
        ##            #foreach($innerParm in $param.innerAttrClass)
        ##                $initParams($innerParm)
        ##            #end
        ##        #end
    #end
#end

#macro(combineParams $params)
    #foreach($param in $params)
        ${param.testClassMemberName}#if($foreach.hasNext),#end
    #end
#end

#macro(mockMethodPart $params)
    #if(!$params.empty)
    when:
        #foreach($mockedMethod in $params)
            #mockMethod($mockedMethod)
        #end
    #end
#end





